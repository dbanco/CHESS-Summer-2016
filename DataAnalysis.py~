"""
Data Analysis Functions

@author: Kenny Swartz
06/07/2016
"""
import numpy as np
import matplotlib.pyplot as plt
import importlib
import PeakFitting
PeakFitting = importlib.reload(PeakFitting)

def analyze_strip(image, strip_orient, strip_width, pix_rng, peak_path, FWHM=10, Am=2000):
    """ function fits a peak to a summed strip of a ge2 detector image
    
    inputs:
    
    image             : ge2 detector image
    strip_orient      : 'v' for vertical strip, 'h' for horizontal strip
    strip_width       : width of strip that is analyzed to fit peak
    pix_rnge          : range of pixels where the desired peak is located
    peak_directory    : directory where peak fits are saved
    FWHM              : initial guess for full width half max of peak
    Am                : initial guess for peak amplitude
    
    outputs:
    
    true_center       : location (index) of peak center   """
    
    ###########################################################################
    def get_indices(peak, ctr=0.5, lo=0.25, hi=0.75): 
        """ function determines indices required for PeakFitting function
        
        inputs:
        
        peak              : 1d array of peak
        ctr, lo, hi       : location of peak center, left cutoff, and right cutoff as a ratio of the length of the peak vector
        
        outputs:
        
        peakCtr, loCut, hiCut : indices of peak vector corresponding to peak center, left cutoff, and right cutoff """
        
        peakCtr = int(round(len(peak)*ctr))
        loCut   = int(round(len(peak)*lo))
        hiCut   = int(round(len(peak)*hi))
        
        return peakCtr, loCut, hiCut
    ###########################################################################

    if strip_orient == 'v':
        vertical_strip    = image[ :, image.shape[1]//2-strip_width//2 : image.shape[1]//2+strip_width//2 ]
        line              = np.sum(vertical_strip, axis=1)
        
    if strip_orient == 'h':
        horizontal_strip  = image[ image.shape[0]//2-strip_width//2 : image.shape[0]//2+strip_width//2 , :]
        line              = np.sum(horizontal_strip, axis=0)
    
    peak                  = line[pix_rng[0]:pix_rng[1]]
    x_index               = np.linspace(1,len(peak),num=len(peak))
    peakCtr, loCut, hiCut = get_indices(peak)
    y_bg_corr, background = PeakFitting.RemoveBackground(x_index, peak, peakCtr, loCut, hiCut)
    fit, best_parameter   = PeakFitting.fitPeak(x_index, y_bg_corr, FWHM, peakCtr, Am)
    fit_center            = best_parameter[1]
    true_center           = fit_center + pix_rng[0]

    plt.close('all')
    plt.plot(x_index, y_bg_corr, 'ok')
    plt.plot(x_index, fit,       '-r')
    plt.savefig(peak_path)
    plt.close('all')

    return true_center     
    
    
def find_closest_vic2d(vic2d_data, x, y, out_index, x_ind=5, y_ind=6):
    """ function finds the closest vic2d data point to desired data points described by x and y locations
    
    inputs:
    
    vic2d_data        : numpy array of vic2d data read in by DataReader.vic2d_reader (number of data points x columns of output data)
    x                 : 1d array of x coordinates of desired data points
    y                 : 1d array of y coordinates of desired data points
    out_index         : index corresponding to column of desired data to grab
    x_ind, y_ind      : indices corresponding to x and y coordinates in mm (will usually be 5 and 6 if calibration is performed)
    
    outputs:
    
    vic2d_out         : 1d array of desired vic2d data at closest points to input x,y coordinates """
    
    vic2d_out             = np.zeros(x.shape[0])

    for i_loc in range(x.shape[0]):
        dist_2                = (vic2d_data[:, x_ind] - x[i_loc])**2 + (vic2d_data[:, y_ind] - y[i_loc])**2
        index                 = np.argmin(dist_2)
        vic2d_out[i_loc]      = vic2d_data[index, out_index]    
        
    return vic2d_out
    
def shift_vic2d_origin(vic2d_data, xc, yc):
    """ function shifts the coordinate system of vic2d data to a desired location at (xc, yc)
    
    inputs:
    
    vic2d_data        : numpy array of vic2d data read in by DataReader.vic2d_reader (number of data points x columns of output data)
    xc, yc            : x and y coordinates of desired new origin
    
    outputs:
    
    vic2d_data        : numpy array of vic2d data with shifted coordinate system """

    vic2d_data[:,5] -= xc
    vic2d_data[:,6] -= yc
    
    return vic2d_data